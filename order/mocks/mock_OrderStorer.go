// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/enrico5b1b4/order-service/order (interfaces: OrderStorer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	order "github.com/enrico5b1b4/order-service/order"
	gomock "github.com/golang/mock/gomock"
	go_uuid "github.com/satori/go.uuid"
)

// MockOrderStorer is a mock of OrderStorer interface
type MockOrderStorer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStorerMockRecorder
}

// MockOrderStorerMockRecorder is the mock recorder for MockOrderStorer
type MockOrderStorerMockRecorder struct {
	mock *MockOrderStorer
}

// NewMockOrderStorer creates a new mock instance
func NewMockOrderStorer(ctrl *gomock.Controller) *MockOrderStorer {
	mock := &MockOrderStorer{ctrl: ctrl}
	mock.recorder = &MockOrderStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderStorer) EXPECT() *MockOrderStorerMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method
func (m *MockOrderStorer) CreateOrder(arg0 *order.OrderDB) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder
func (mr *MockOrderStorerMockRecorder) CreateOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderStorer)(nil).CreateOrder), arg0)
}

// GetOrderByID mocks base method
func (m *MockOrderStorer) GetOrderByID(arg0 int) (*order.OrderDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", arg0)
	ret0, _ := ret[0].(*order.OrderDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID
func (mr *MockOrderStorerMockRecorder) GetOrderByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderStorer)(nil).GetOrderByID), arg0)
}

// GetOrderByOrderID mocks base method
func (m *MockOrderStorer) GetOrderByOrderID(arg0 go_uuid.UUID) (*order.OrderDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByOrderID", arg0)
	ret0, _ := ret[0].(*order.OrderDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByOrderID indicates an expected call of GetOrderByOrderID
func (mr *MockOrderStorerMockRecorder) GetOrderByOrderID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByOrderID", reflect.TypeOf((*MockOrderStorer)(nil).GetOrderByOrderID), arg0)
}

// GetOrders mocks base method
func (m *MockOrderStorer) GetOrders(arg0 string) ([]*order.OrderDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0)
	ret0, _ := ret[0].([]*order.OrderDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders
func (mr *MockOrderStorerMockRecorder) GetOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderStorer)(nil).GetOrders), arg0)
}

// UpdateOrder mocks base method
func (m *MockOrderStorer) UpdateOrder(arg0 *order.OrderDB) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder
func (mr *MockOrderStorerMockRecorder) UpdateOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderStorer)(nil).UpdateOrder), arg0)
}
